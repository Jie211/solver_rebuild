!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLAS_H_INCLUDED__	blas.h	2;"	d
BUILD_DIR	Makefile	/^BUILD_DIR = Build$/;"	m
CC	Makefile	/^	CC = gcc$/;"	m
CC	Makefile	/^	CC = gcc-6$/;"	m
CG	share.h	/^  CG,$/;"	e	enum:SolverName
CG_CRS	CRS/cg.c	/^int CG_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, const struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
CG_H_INCLUDED__	CRS/cg.h	2;"	d
CG_Init	CRS/cg.c	/^void CG_Init(double *rvec, double *pvec, double *Av, double *xvec, const int N)$/;"	f
CR	share.h	/^  CR,$/;"	e	enum:SolverName
CR_CRS	CRS/cr.c	/^int CR_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, const struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
CR_H_INCLUDED__	CRS/cr.h	2;"	d
CR_init	CRS/cr.c	/^void CR_init(double *rvec, double *pvec, double *qvec, double *svec, double *xvec, const int N)$/;"	f
DEPS	Makefile	/^DEPS=$(patsubst %.o,%.d, $(OBJS))$/;"	m
EBUG	share.h	4;"	d
GCR	share.h	/^  GCR,$/;"	e	enum:SolverName
GCR_CRS	CRS/gcr.c	/^int GCR_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, const struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
GCR_H_INCLUDED__	CRS/gcr.h	2;"	d
GCR_init	CRS/gcr.c	/^void GCR_init(double *rvec, double *Av, double *x_0, double *qq, double **qvec, double **pvec, const int N, const int restart)$/;"	f
GMRES	share.h	/^  GMRES,$/;"	e	enum:SolverName
GMRES_CRS	CRS/gmres.c	/^int GMRES_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, const struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
GMRES_H_INCLUDED__	CRS/gmres.h	2;"	d
GMRES_init	CRS/gmres.c	/^void GMRES_init(double *rvec, double *axvec, double *evec, double *vvec, double *vmtx, double *hmtx, double *yvec, double *wvec, double *avvec, double *hvvec, double *cvec, double *svec, double *x0vec, double *tmpvec, double *x_0, double *xvec, const int N, const int restart)$/;"	f
INC_DIR	Makefile	/^INC_DIR = .$/;"	m
IO_H_INCLUDED__	io.h	2;"	d
KSKIPCG	share.h	/^  KSKIPCG,$/;"	e	enum:SolverName
KSKIPCG_CRS	CRS/kskipcg.c	/^int KSKIPCG_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, const struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
KSKIPCG_H_INCLUDED__	CRS/kskipcg.h	2;"	d
KSKIPCG_init	CRS/kskipcg.c	/^void KSKIPCG_init(double **Ap, double **Ar, double *delta, double *eta, double *zeta, double *rvec, double *pvec, double *Av, double *xvec, const int N, const int kskip)$/;"	f
KSKIPCR	share.h	/^  KSKIPCR,$/;"	e	enum:SolverName
KSKIPCR_CRS	CRS/kskipcr.c	/^int KSKIPCR_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, const struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
KSKIPCR_H_INCLUDED__	CRS/kskipcr.h	2;"	d
KSKIPCR_Init	CRS/kskipcr.c	/^void KSKIPCR_Init(double *v1, double *v2, double *v3, double *v4, double *v5, double *v6, double *v7, double *v8, double *v9, int N, int kskip)$/;"	f
MV_mult_CSR	blas.c	/^void MV_mult_CSR(double *out, const double *val, const int *col, const int *ptr, const double *vec, const int N)$/;"	f
NONE	share.h	/^  NONE$/;"	e	enum:SolverName
OBJS	Makefile	/^OBJS=$(addprefix $(BUILD_DIR)\/,$(patsubst %.c,%.o,$(SRCS)))$/;"	m
Parameter	share.h	/^struct Parameter{$/;"	s
SELECTER_H_INCLUDED__	selecter.h	2;"	d
SHARE_H_INCLUDED__	share.h	2;"	d
SRCS	Makefile	/^SRCS = \\$/;"	m
START_H_INCLUDED__	start.h	2;"	d
SolverName	share.h	/^enum SolverName{$/;"	g
TARGET	Makefile	/^TARGET = Solver$/;"	m
TOOLS_H_INCLUDED__	tools.h	2;"	d
UNAME	Makefile	/^UNAME := $(shell uname)$/;"	m
VPCG	share.h	/^  VPCG,$/;"	e	enum:SolverName
VPCG_CRS	CRS/vpcg.c	/^int VPCG_CRS(double *val, int *col, int *ptr, double *bvec, double *xvec, struct Parameter *para, const int N, const int NNZ, const bool f_isinner)$/;"	f
VPCG_H_INCLUDED__	CRS/vpcg.h	2;"	d
VPCG_Init	CRS/vpcg.c	/^void VPCG_Init(double *rvec, double *pvec, double *Av, double *zvec, double *xvec, const int N)$/;"	f
VPCR	share.h	/^  VPCR,$/;"	e	enum:SolverName
VPGCR	share.h	/^  VPGCR,$/;"	e	enum:SolverName
VPGMRES	share.h	/^  VPGMRES,$/;"	e	enum:SolverName
bx_path	share.h	/^  char bx_path[128];$/;"	m	struct:Parameter
c_inner_solver	share.h	/^  enum SolverName c_inner_solver;$/;"	m	struct:Parameter	typeref:enum:Parameter::SolverName
c_matrix	share.h	/^  char c_matrix[128];$/;"	m	struct:Parameter
c_outer_solver	share.h	/^  enum SolverName c_outer_solver;$/;"	m	struct:Parameter	typeref:enum:Parameter::SolverName
cal_arap_kskipcg_d	blas.c	/^void cal_arap_kskipcg_d(double **Ar, double **Ap, double *val, int *col, int *ptr, double *rvec, double *pvec, const int N, const int kskip)$/;"	f
cal_arap_kskipcr_d	blas.c	/^void cal_arap_kskipcr_d(double *Ar, double *Ap, double *val, int *col, int *ptr, double *rvec, double *pvec, const int N, const int kskip)$/;"	f
cal_deltaetazeta_kskipcg_d	blas.c	/^void cal_deltaetazeta_kskipcg_d(double *delta, double *eta, double *zeta, double **Ar, double **Ap, double *rvec, double *pvec, const int N, const int kskip)$/;"	f
cal_deltaetazeta_kskipcr_d	blas.c	/^void cal_deltaetazeta_kskipcr_d(double *delta, double *eta, double *zeta, double *Ar, double *Ap, double *rvec, const int N, const int kskip)$/;"	f
check_opt	io.c	/^int check_opt(struct Parameter *para)$/;"	f
check_solver	io.c	/^int check_solver(char *optarg, enum SolverName *solver)$/;"	f
col_path	share.h	/^  char col_path[128];$/;"	m	struct:Parameter
csr_start	start.c	/^int csr_start(int argc, char *argv[])$/;"	f
d_inner_eps	share.h	/^  double d_inner_eps;$/;"	m	struct:Parameter
d_outer_eps	share.h	/^  double d_outer_eps;$/;"	m	struct:Parameter
dot_d	blas.c	/^double dot_d(const double *x, const double *y, const int N)$/;"	f
error_d_CRS	blas.c	/^double error_d_CRS(double *val, const int *col, const int *ptr, const double *b, const double *x_new, const double *x_0, const int N)$/;"	f
error_handle	tools.c	/^int error_handle(int error_code, char *msg)$/;"	f
error_log	tools.c	/^void error_log(char *output)$/;"	f
f_cuda	share.h	/^  bool f_cuda;$/;"	m	struct:Parameter
f_verbose	share.h	/^  bool f_verbose;$/;"	m	struct:Parameter
file_init	tools.c	/^FILE *file_init(const char *name, const char *mode)$/;"	f
file_print	tools.c	/^void file_print(FILE *fp, double *vec, const int N)$/;"	f
find_mat	io.c	/^int find_mat(struct Parameter *para)$/;"	f
free_1d	tools.c	/^void free_1d(double *ptr)$/;"	f
free_1i	tools.c	/^void free_1i(int *ptr)$/;"	f
free_2d	tools.c	/^void free_2d(double **ptr, int num)$/;"	f
free_2i	tools.c	/^void free_2i(int **ptr, int num)$/;"	f
get_mat_data	io.c	/^int get_mat_data(const struct Parameter *para, int *col, int *ptr, double *val, double *bvec, double *xvec, const int N, const int NNZ)$/;"	f
get_mat_head	io.c	/^int get_mat_head(const struct Parameter *para, int *N, int *NNZ)$/;"	f
get_opt	io.c	/^int get_opt(int argc, char *argv[], struct Parameter *para)$/;"	f
i_inner_fix	share.h	/^  int i_inner_fix;$/;"	m	struct:Parameter
i_inner_kskip	share.h	/^  int i_inner_kskip;$/;"	m	struct:Parameter
i_inner_maxloop	share.h	/^  int i_inner_maxloop;$/;"	m	struct:Parameter
i_inner_restart	share.h	/^  int i_inner_restart;$/;"	m	struct:Parameter
i_outer_fix	share.h	/^  int i_outer_fix;$/;"	m	struct:Parameter
i_outer_kskip	share.h	/^  int i_outer_kskip;$/;"	m	struct:Parameter
i_outer_maxloop	share.h	/^  int i_outer_maxloop;$/;"	m	struct:Parameter
i_outer_restart	share.h	/^  int i_outer_restart;$/;"	m	struct:Parameter
i_thread	share.h	/^  int i_thread;$/;"	m	struct:Parameter
init_ver	io.c	/^void init_ver(struct Parameter *para)$/;"	f
inner_selecter	selecter.c	/^int inner_selecter(struct Parameter *para, double *bvec, double *xvec, double *val, int *col, int *ptr, int N, int NNZ)$/;"	f
isVP	share.h	/^  bool isVP;$/;"	m	struct:Parameter
list	share.h	/^  char list[20][128];$/;"	m	struct:Parameter
main	main.c	/^int main(int argc, char *argv[])$/;"	f
malloc_1d	tools.c	/^double *malloc_1d(int num)$/;"	f
malloc_1i	tools.c	/^int *malloc_1i(int num)$/;"	f
malloc_2d	tools.c	/^double **malloc_2d(int num_x, int num_y)$/;"	f
malloc_2i	tools.c	/^int** malloc_2i(int num_x, int num_y)$/;"	f
norm_1_d	blas.c	/^double norm_1_d(double *v, const int N)$/;"	f
norm_2_d	blas.c	/^double norm_2_d(double *v, const int N)$/;"	f
normal_log	tools.c	/^void normal_log(char *output)$/;"	f
outer_selecter	selecter.c	/^int outer_selecter(struct Parameter *para, double *bvec, double *xvec, double *val, int *col, int *ptr, const int N, const int NNZ)$/;"	f
ptr_path	share.h	/^  char ptr_path[128];$/;"	m	struct:Parameter
scalar_d	blas.c	/^void scalar_d(double *out, const double a, const double *x, const int N)$/;"	f
scalar_xpy_d	blas.c	/^void scalar_xpy_d(double *out, const double a, const double *x, const double *y, const int N)$/;"	f
set_openmp_thread	tools.c	/^int set_openmp_thread(const int thread)$/;"	f
show_opt	io.c	/^void show_opt(struct Parameter *para)$/;"	f
solve_Hye	blas.c	/^void solve_Hye(double *h, double *y, double *e, const int n, const int size)$/;"	f
vec_add	blas.c	/^void vec_add(double *out, const double *x, const double *y, const int N)$/;"	f
vec_add_d	tools.c	/^void vec_add_d(double *out, double *x, double *y, const int N)$/;"	f
vec_copy	tools.c	/^void vec_copy(double *t, double *f, const int size)$/;"	f
vec_init	tools.c	/^void vec_init(double *v, const double val, const int size)$/;"	f
vec_init_2	tools.c	/^void vec_init_2(double **v, const double val, const int sizex, const int sizey)$/;"	f
vec_sub	blas.c	/^void vec_sub(double *out, const double *x, const double *y, const int N)$/;"	f
warning_log	tools.c	/^void warning_log(char *output)$/;"	f
